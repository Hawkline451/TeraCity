package speedAlgorithm;

import org.terasology.codecity.world.map.CodeMap;
import org.terasology.codecity.world.map.CodeMapFactory;
import org.terasology.codecity.world.map.DrawableCode;
import org.terasology.codecity.world.map.MapObject;
import org.terasology.codecity.world.structure.scale.CodeScale;
import org.terasology.codecity.world.structure.scale.HalfLinearCodeScale;
import org.terasology.codecity.world.structure.scale.SquareRootCodeScale;
import org.terasology.math.Vector2i;
import org.terasology.registry.CoreRegistry;
import org.terasology.world.WorldProvider;

import speedMath.CodeMapSpeedMath;

/**
 * @author cristian
 * Object that represents the speed of the CodeMap map.
 */
public class CodeMapSpeed extends Speed {
    
    private float calculatedSpeed;
    private CodeScale scale = new HalfLinearCodeScale();
    private CodeMapFactory factory = new CodeMapFactory(scale);
    private int maxHeight;
    
    public CodeMapSpeed(){
    	calculatedSpeed = this.calculateSpeed();
    }
    
	/**
	 * @return A float value of the calculated Velocity.
	 * Method that calculates the velocity of the character according to the size
	 * of the building generated by CodeMap. 
	 */
	float calculateSpeed() {
	    DrawableCode dc = CoreRegistry.get(CodeMap.class).getMapObjects().iterator().next().getObject();
	    int sizeX = dc.getSize(factory);
	    int sizeY = dc.getSize(factory);
	    getHeight();
	    int sizeZ = maxHeight;
	    // We calculate the velocity according to the formula given in the CodeMapSpeedMath class
		float calculatedVelocity = new CodeMapSpeedMath(sizeX, sizeY, sizeZ).getResult();
		return calculatedVelocity;
	}
	
    /**
     * Method that calculate the height of the map. This method calls another recursive method for it.
     */
    private void getHeight() {
        WorldProvider world = CoreRegistry.get(WorldProvider.class);
        maxHeight = 0;
        if (world != null) {
        	CodeMap map = CoreRegistry.get(CodeMap.class);
        	getHeightRecursive(map, Vector2i.zero(), 10, world); //10 default ground level
        }
    }
    
	/**
	 * @param map The CodeMap we are in.
	 * @param offset A zero offset for the begining.
	 * @param level Default level for starting the recursion.
	 * @param world The current world.
	 * Method that recursively calculates the height of the map.
	 */
	private void getHeightRecursive(CodeMap map, Vector2i offset, int level, WorldProvider world) {
        for (MapObject obj : map.getMapObjects()) {
            int x = obj.getPositionX() + offset.getX();
            int y = obj.getPositionZ() + offset.getY();
            int height = obj.getHeight(factory) + level;
            for (int z = level; z < height; z++){
            	if(z > this.maxHeight){
            		this.maxHeight = z;
            	}
            }
            if (obj.isOrigin())
                getHeightRecursive(obj.getObject().getSubmap(factory), new Vector2i(x+1, y+1), height, world);
        }
    }
	
	@Override
	public float getCalculatedSpeed() {
		return calculatedSpeed;
	}
	
	@Override
	public int getMaxHeight() {
		return maxHeight;
	}

}
